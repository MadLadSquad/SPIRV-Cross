#version 450
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 6) const int Scope = 3;
layout(constant_id = 0) const int Rows = 16;
layout(constant_id = 1) const int Columns = 16;
layout(constant_id = 5) const int Layout = 0;

layout(set = 0, binding = 0, std430) buffer SSBO32
{
    float data[];
} ssbo32;

layout(set = 0, binding = 0, std430) buffer SSBO16
{
    float16_t data[];
} ssbo16;

shared uint blah[512];

void loads_32()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _60;
    coopMatLoad(_60, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _60;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A32 = tempArg;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _79;
    coopMatLoad(_79, ssbo16.data, 512u * gl_WorkGroupID.x, 32u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg_1 = _79;
    A32 = tempArg_1;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _92;
    coopMatLoad(_92, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> tempArg_2 = _92;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> B32 = tempArg_2;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _103;
    coopMatLoad(_103, ssbo16.data, 512u * gl_WorkGroupID.x, 32u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> tempArg_3 = _103;
    B32 = tempArg_3;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _116;
    coopMatLoad(_116, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_4 = _116;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> C32 = tempArg_4;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _127;
    coopMatLoad(_127, ssbo16.data, 512u * gl_WorkGroupID.x, 32u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_5 = _127;
    C32 = tempArg_5;
}

void loads_16()
{
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _141;
    coopMatLoad(_141, ssbo32.data, 128u * gl_WorkGroupID.x, 8u, Layout);
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _141;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> A16 = tempArg;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _152;
    coopMatLoad(_152, ssbo16.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> tempArg_1 = _152;
    A16 = tempArg_1;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _164;
    coopMatLoad(_164, ssbo32.data, 128u * gl_WorkGroupID.x, 8u, Layout);
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> tempArg_2 = _164;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> B16 = tempArg_2;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _175;
    coopMatLoad(_175, ssbo16.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> tempArg_3 = _175;
    B16 = tempArg_3;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _187;
    coopMatLoad(_187, ssbo32.data, 128u * gl_WorkGroupID.x, 8u, Layout);
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_4 = _187;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> C16 = tempArg_4;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _198;
    coopMatLoad(_198, ssbo16.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_5 = _198;
    C16 = tempArg_5;
}

void stores()
{
    coopMatStore(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, Layout);
    coopMatStore(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(100u), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, Layout);
    coopMatStore(coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(-100), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, Layout);
    coopMatStore(coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA>(float16_t(100.0)), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, Layout);
    coopMatStore(coopmat<int16_t, Scope, Rows, Columns, gl_MatrixUseA>(-100s), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, Layout);
    coopMatStore(coopmat<uint16_t, Scope, Rows, Columns, gl_MatrixUseA>(100us), ssbo32.data, 128u * gl_WorkGroupID.x, 0u, Layout);
}

void len()
{
    int len_1 = int(uint(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(0).length()));
    len_1 = int(uint(coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB>(0).length()));
    len_1 = int(uint(coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator>(0).length()));
    len_1 = int(uint(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(0).length()));
    len_1 = int(uint(coopmat<int16_t, Scope, Rows, Columns, gl_MatrixUseB>(0).length()));
    len_1 = int(uint(coopmat<uint16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator>(0).length()));
}

void conversions()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> A2 = coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(100u);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> B = coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(A);
    B = coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(A2);
}

void elementwise()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> B = coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(100);
    A += A;
    A -= A;
    A *= A;
    A /= A;
    A *= 100.0;
    B += B;
    B -= B;
    B *= B;
    B /= B;
    B *= 100;
}

void insert_extract()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    for (int i = 0; i < int(uint(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(0).length())); i++)
    {
        A[i] += 50.0;
    }
    coopMatStore(A, ssbo32.data, 0u, 16u, Layout);
}

void scalar_construct()
{
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> A = coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(gl_WorkGroupID.x);
    coopMatStore(A, ssbo32.data, 0u, 16u, Layout);
}

void matmul()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _268;
    coopMatLoad(_268, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _268;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _279;
    coopMatLoad(_279, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> tempArg_1 = _279;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> B = tempArg_1;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _290;
    coopMatLoad(_290, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_2 = _290;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> C = tempArg_2;
    C = coopMatMulAdd(A, B, C, 0);
    C = coopMatMulAdd(A, B, C, 0);
    C = coopMatMulAdd(A, B, C, 16);
}

void matmul_uint()
{
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> _315;
    coopMatLoad(_315, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _315;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> _328;
    coopMatLoad(_328, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> tempArg_1 = _328;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> B = tempArg_1;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> _341;
    coopMatLoad(_341, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_2 = _341;
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> C = tempArg_2;
    C = coopMatMulAdd(A, B, C, 31);
}

void matmul_int()
{
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> _358;
    coopMatLoad(_358, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _358;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> _371;
    coopMatLoad(_371, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> tempArg_1 = _371;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> B = tempArg_1;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> _384;
    coopMatLoad(_384, ssbo32.data, 256u * gl_WorkGroupID.x, 16u, Layout);
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> tempArg_2 = _384;
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> C = tempArg_2;
    C = coopMatMulAdd(A, B, C, 31);
}

void lds()
{
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _482;
    coopMatLoad(_482, blah, 0u, 16u, Layout);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> tempArg = _482;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> A = tempArg;
    coopMatStore(A, blah, 0u, 16u, Layout);
}

void main()
{
    loads_32();
    loads_16();
    stores();
    len();
    conversions();
    elementwise();
    insert_extract();
    scalar_construct();
    matmul();
    matmul_uint();
    matmul_int();
    lds();
}

